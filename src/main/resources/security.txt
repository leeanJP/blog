스프링 시큐리티
> 스프링 기반의 애플리케이션 보안(인증, 인가, 권한)을 담당하는 스프링 하위 프레임워크
보안관련 옵션 제공
CSRF 공격, 세션고정 공격 방어
요청 헤더도 보안처리
개발자가 보안관련 개발을 해야하는 부담을 줄여준다.
인증
 - 사용자의 신원을 입증하는 과정 (ex 로그인)
인가
 - 사이트의 특정부분에 접근할 수 있는지(ex 관리자페이지)

스프링 시큐리티는 필터 기반으로 동작한다.

UsernamePasswordAuthenticationFilter
 > 아이디와 패스워드가 넘어오면 인증요청을 위임하는 인증 관리자 역할

FilterSecurityInterceptor
 > 권한 처리를 위임해 접근제어 결정을 하는 접근결정 관리자 역할

 SecurityContextPersistenceFilter
 SecurityContextRepository 에서 SecurityContext 를 가져오거나 저장하는 역할

 LogoutFilter
 로그아웃 요청 처리

 UsernamePasswordAuthenticationFilter
 폼 기반 로그인을 할 때 사용되는 필터
 인증에 성공하면 AuthenticationSuccessHandler 를 실행하고
 인증에 실패하면 AuthenticationFailureHandler 를 실행

DefaultLoginPageGeneratingFilter
 사용자가 로그인 페이지를 지정하지 않았을 때 기본으로 설정하는 로그인 페이지 관련 필터

BasicAuthenticationFilter
 요청 헤더에 있는 아이디, 패스워드를 파싱해서 인증요청 위임

 RequestCacheAwareFilter
 로그인 성공 후, 관련 있는 캐시 요청이 있는지 확인하고 캐시요청 처리

SecurityContextHolderAwareRequestFilter
 HttpServletRequest를 감싼다. 필터 체인 상의 다음 필터들에서 부가정보 제공

SessionManagementFilter
인증된 사용자와 관련된 세션 관련 작업 진행
세션 변조 방지 전략 설정, 유효하지 않은 세션 처리
세션 생성 전략을 세우는 작업을 처리함

아이디/패스워드 기반 폼로그인 시도 로그인 인증 절차
1.사용자가 form 아이디/패스워드 입력하면 HTTPServletRequest
에 ID / PWD 가 전달됨
 AuthenticationFilter 유효성 검사
2. 유효성 검사가 끝나면 실제 구현체인 Token을 만들어서 넘겨준다.
3. 전달받은 인증용 객체 Token 을 AuthenticationManager에게 보낸다.
4. Provider에게 보내준다.
5. UserDetailsService로 보내주고
6~7.UserDetailsService 사용자 아이디로 찾은 정보를 UserDetails 객체로 만들어서
Provider에게 전달한다.
8~10.SecurityContextHolder 에 Authentication 을 저장
성공하면 AuthenticationSuccessHandler 실패하면 AuthenticationFailureHandler 를 실행

JWT 토큰

사용자가 서버에 접근할 때 이 사용자가 인증된 사용자인지 확인하는 방법
 - 서버 기반 인증
 - 토큰 기반 인증

토큰 기반 인증의 특징
 무상태성 - 사용자 인증정보가 담겨있는 토큰이 서버가 아닌 클라이언트에 저장됨
          서버 입장에서는 인증정보를 저장하거나 유지하지 않아도 되기때문에
          무상태로 효율적인 검증을 할 수 있다.
 확장성 -  결제 서버랑 주문을 위한 서버가 분리 되어있다고 했을 때
          세션 인증 기반은 각각의 API에서 인증을 해야하는데 반해
          토큰 기반 인증에서는 토큰을 가지는 주체가 서버가 아니라 클라이언트기 때문에
          하나의 토큰으로 결제서버와 주문 서버에 요청을 보낼 수 있다.
          (ex. 로그인 인증 - 구글,네이버,카카오 로그인)

 무결성 - 토큰 방식은 HMAC(hash-based message authentication) 기법을 사용함.
         토큰 발급 이후에 토큰 정보를 변경할 수 없음.
         무결성이 보장된다.

클라이언트가 서버에 요청을 할 때 추가로 전송해야하는 정보가 늘어나기
때문에 요청/응답 시 payload가 커지는 단점이 있다.

발급받은 JWT를 이용해 인증을 하려면 HTTP 요청 헤더 중에
Authorization 키값에 Bearer + JWT 토큰값을 넣어서 보내야 한다.


헤더에는 토큰의 타입과 해싱 알고리즘을 지정하는 정보가 담겨있다.
내용에는 토큰과 관련된 정보
한 덩어리를 클레임 부르고 key - value 형태의 한 쌍으로 이루어져있다.
클레임은 공개 클레임, 비공개 클레임
공개 클레임은 - 공개되어도 상관없는 클레임
iss : 토큰 발급자
iat : 발급된 시간
exp : 만료 시간
aud : 토큰 대상자
sub : 토큰 제목

서명은 해당 토큰이 조작,변경되지 않았음을 확인하는 용도
헤더의 인코딩 값 + 내용의 인코딩 값 합친 후에 주어진 비밀키로 해시값 생성

Access Token 유효기간은 짧게 설정하고
Refresh Token 유효기간은 길게 설정
사용자는 둘 다 서버에 전송하고 A 로 인증하고 만료됐을 때에는 R으로 다시 A를 받는다.
공격자는 A를 탈취하더라도 짧은 유효기간이 지나고 나면 사용할 수 없다.
토큰이 탈취되더라도 피해를 줄이기 위해 토큰의 사용 시간 자체를 줄이는 방법을 택함

jjwt 버전업 관련 이슈
현재는 0.9 버전 사용 중
최신 버전 0.11 버전 사용 경우에
secret_key '_' 언더바 사용 불가능
비밀키는 256bit 이상 사용(한글자당 8bit 32자 이상되어야)
WeakKeyException 발생















